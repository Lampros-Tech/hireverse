var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/* eslint-disable-next-line camelcase */
import { TablelandTables__factory } from "@textile/eth-tableland";
function registerTable() {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        const signer = this.signer;
        const address = yield signer.getAddress();
        /* eslint-disable-next-line camelcase */
        const network = this.network;
        const contractAddresses = {
            staging: "0x847645b7dAA32eFda757d3c10f1c82BFbB7b41D0",
            testnet: "0x30867AD98A520287CCc28Cde70fCF63E3Cdb9c3C",
        };
        const contract = TablelandTables__factory.connect(contractAddresses[network], signer);
        const tx = yield contract.safeMint(address);
        const receipt = yield tx.wait();
        const [event] = (_a = receipt.events) !== null && _a !== void 0 ? _a : [];
        return {
            receipt,
            tableId: (_b = event.args) === null || _b === void 0 ? void 0 : _b.tokenId,
        };
    });
}
export { registerTable };
//# sourceMappingURL=eth-calls.js.map