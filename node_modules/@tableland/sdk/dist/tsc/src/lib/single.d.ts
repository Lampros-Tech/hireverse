import { Signer } from "ethers";
import { ConnectionOptions, Token, ConnectionReceipt } from "../interfaces";
declare function isConnected(): boolean;
declare function connectionCheck(): void;
declare function setToken(tokenToBe?: Token): Promise<void>;
declare function getToken(): Promise<Token>;
declare function setSigner(newSigner: Signer): Promise<boolean>;
declare function getSigner(): Promise<Signer>;
declare function getHost(): string;
declare function getNetwork(): string;
declare function setNetwork(setNetworkTo: string): void;
declare function setHost(newHost: string): Promise<void>;
/**
 *
 * `connect` is a wrapper for using an ethereum signature to communicate with a Tableland server.
 * This client library can be used to interact with a local or remote Tableland gRPC-service
 * It is a wrapper around Textile Tableland DB API
 *
 * @param {ConnectionOptions} Object Host to connect to, and previous jwsToken if needed.
 * @returns {ConnectionReceipt} Object containing JWS token, and a list of ETH accounts
 *
 * @example
 * ```typescript
 * import { connect, createTable } from '@textile/tableland'
 *
 *
 * async function setupDB() {
 *    const connectionReceipt = await connect("https://testnet.tableland.network");
 *    createTable("CREATE TABLE table_name (Foo varchar(255), Bar int)");
 * }
 * ```
 */
declare function connect(options?: ConnectionOptions): Promise<ConnectionReceipt>;
export { connect, getSigner, setSigner, getHost, setHost, setToken, getToken, setNetwork, getNetwork, isConnected, connectionCheck, };
