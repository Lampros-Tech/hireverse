/* eslint-disable node/no-missing-import */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { list } from "./list.js";
function SendCall(rpcBody) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield fetch(`${this.host}/rpc`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                Authorization: `Bearer ${this.token.token}`,
            },
            body: JSON.stringify(rpcBody),
        });
    });
}
// parse the rpc response and throw if any of the different types of errors occur
function sendResponse(res) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!res.ok)
            throw new Error(res.statusText);
        const json = yield res.json();
        // NOTE: we are leaving behind the error code because the Error type does not allow for a `code` property
        if (json.error)
            throw new Error(json.error.message);
        return json.result;
    });
}
function GeneralizedRPC(method, statement, tableId, options) {
    return __awaiter(this, void 0, void 0, function* () {
        const signer = this.signer;
        const address = yield signer.getAddress();
        const params = [
            {
                statement: statement,
                id: tableId,
                controller: address,
                type: options === null || options === void 0 ? void 0 : options.type,
            },
        ];
        return {
            jsonrpc: "2.0",
            method: `tableland_${method}`,
            id: 1,
            params,
        };
    });
}
export function checkAuthorizedList() {
    return __awaiter(this, void 0, void 0, function* () {
        const authorized = yield SendCall.call(this, yield GeneralizedRPC.call(this, "authorize", "", "")).then((r) => {
            return r.status === 200;
        });
        return authorized;
    });
}
export function create(query, tableId, options) {
    return __awaiter(this, void 0, void 0, function* () {
        const message = yield GeneralizedRPC.call(this, "createTable", query, tableId, options);
        const response = yield SendCall.call(this, message);
        const json = yield sendResponse(response);
        return json;
    });
}
function query(query, tableId) {
    return __awaiter(this, void 0, void 0, function* () {
        const message = yield GeneralizedRPC.call(this, "runSQL", query, tableId);
        const response = yield SendCall.call(this, message);
        const json = yield sendResponse(response);
        return json;
    });
}
export { query, list };
//# sourceMappingURL=tableland-calls.js.map