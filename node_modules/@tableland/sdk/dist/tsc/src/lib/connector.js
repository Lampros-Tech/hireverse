var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { utils, ethers } from "ethers";
import { list } from "./list.js";
import { createToken } from "./token.js";
import { query } from "./query.js";
import { create } from "./create.js";
function getSigner() {
    return __awaiter(this, void 0, void 0, function* () {
        yield globalThis.ethereum.request({ method: "eth_requestAccounts" });
        const provider = new ethers.providers.Web3Provider(globalThis.ethereum);
        const signer = provider.getSigner();
        return signer;
    });
}
function userCreatesToken(signer) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        const sign = {
            signMessage: (message) => __awaiter(this, void 0, void 0, function* () {
                const sig = yield signer.signMessage(message);
                return utils.arrayify(sig);
            }),
        };
        const iat = ~~(Date.now() / 1000);
        const exp = iat + 60 * 60 * 10; // Default to ~10 hours
        // WARN: This is a non-standard JWT
        // Borrows ideas from: https://github.com/ethereum/EIPs/issues/1341
        const iss = yield signer.getAddress();
        const network = yield ((_a = signer.provider) === null || _a === void 0 ? void 0 : _a.getNetwork());
        const chain = (_b = network === null || network === void 0 ? void 0 : network.chainId) !== null && _b !== void 0 ? _b : "unknown";
        let net = network === null || network === void 0 ? void 0 : network.name;
        if (net === null || net === void 0 ? void 0 : net.startsWith("matic"))
            net = "poly";
        else
            net = "eth";
        const kid = `${net}:${chain}:${iss}`;
        return yield createToken(sign, { kid: kid, alg: "ETH" }, { iss: iss, exp: exp });
    });
}
export function connect(options) {
    var _a, _b, _c;
    return __awaiter(this, void 0, void 0, function* () {
        const network = (_a = options.network) !== null && _a !== void 0 ? _a : "testnet";
        const host = (_b = options.host) !== null && _b !== void 0 ? _b : "https://testnet.tableland.network";
        if (network !== "testnet" && !options.host) {
            throw Error("Please specify a host to connect to. (Example: https://env.tableland.network)");
        }
        const signer = (_c = options.signer) !== null && _c !== void 0 ? _c : (yield getSigner());
        const token = yield userCreatesToken(signer);
        const connectionObject = {
            get token() {
                return token;
            },
            get network() {
                return network;
            },
            get host() {
                return host;
            },
            get signer() {
                return signer;
            },
            get list() {
                return list;
            },
            get query() {
                return query;
            },
            get create() {
                return create;
            },
        };
        return connectionObject;
    });
}
//# sourceMappingURL=connector.js.map