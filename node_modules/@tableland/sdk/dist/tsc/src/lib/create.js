var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as tablelandCalls from "./tableland-calls.js";
import { registerTable } from "./eth-calls.js";
import { BigNumber } from "ethers";
/**
 * Registers an NFT with the Tableland Ethereum smart contract, then uses that to register
 * a new Table on Tableland
 * @param {string} query SQL create statement. Must include 'id' as primary key.
 * @param {CreateTableOptions} options List of options
 * @returns {string} The token ID of the table created
 */
export function create(query, options = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const authorized = yield tablelandCalls.checkAuthorizedList.call(this);
        if (!authorized)
            throw new Error("You are not authorized to create a table");
        // Validation
        let id = options.id;
        if (!id) {
            const { tableId } = yield registerTable.call(this);
            id = BigNumber.from(tableId).toString();
        }
        return yield tablelandCalls.create.call(this, query, id, options);
    });
}
//# sourceMappingURL=create.js.map