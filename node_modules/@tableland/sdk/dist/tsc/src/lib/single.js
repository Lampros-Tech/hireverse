var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { ethers, utils } from "ethers";
import { createToken } from "./token.js";
let signer;
let host;
let token;
let connected;
let network = "https://testnet.tableland.network";
function isConnected() {
    return connected;
}
function connectionCheck() {
    if (!isConnected()) {
        throw Error("Please connect your account before trying anything.");
    }
}
function setToken(tokenToBe) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        const signer = yield getSigner();
        const sign = {
            signMessage: (message) => __awaiter(this, void 0, void 0, function* () {
                const sig = yield signer.signMessage(message);
                return utils.arrayify(sig);
            }),
        };
        const iat = ~~(Date.now() / 1000);
        const exp = iat + 60 * 60 * 10; // Default to ~10 hours
        // WARN: This is a non-standard JWT
        // Borrows ideas from: https://github.com/ethereum/EIPs/issues/1341
        const iss = yield signer.getAddress();
        const network = yield ((_a = signer.provider) === null || _a === void 0 ? void 0 : _a.getNetwork());
        const chain = (_b = network === null || network === void 0 ? void 0 : network.chainId) !== null && _b !== void 0 ? _b : "unknown";
        let net = network === null || network === void 0 ? void 0 : network.name;
        if (net === null || net === void 0 ? void 0 : net.startsWith("matic"))
            net = "poly";
        else
            net = "eth";
        const kid = `${net}:${chain}:${iss}`;
        token =
            tokenToBe ||
                (yield createToken(sign, { kid: kid, alg: "ETH" }, { iss: iss, exp: exp }));
    });
}
function getToken() {
    return __awaiter(this, void 0, void 0, function* () {
        if (!token) {
            yield setToken();
        }
        return token;
    });
}
function setSigner(newSigner) {
    return __awaiter(this, void 0, void 0, function* () {
        signer = newSigner;
        return true;
    });
}
function getSigner() {
    return __awaiter(this, void 0, void 0, function* () {
        if (!signer) {
            const provider = new ethers.providers.Web3Provider(globalThis.ethereum);
            signer = provider.getSigner();
        }
        return signer;
    });
}
function getHost() {
    if (!host) {
        throw Error("No host set");
    }
    return host;
}
function getNetwork() {
    return network;
}
function setNetwork(setNetworkTo) {
    network = setNetworkTo;
}
function setHost(newHost) {
    return __awaiter(this, void 0, void 0, function* () {
        // Should probably validate newHost is a valid host.
        host = newHost;
    });
}
/**
 *
 * `connect` is a wrapper for using an ethereum signature to communicate with a Tableland server.
 * This client library can be used to interact with a local or remote Tableland gRPC-service
 * It is a wrapper around Textile Tableland DB API
 *
 * @param {ConnectionOptions} Object Host to connect to, and previous jwsToken if needed.
 * @returns {ConnectionReceipt} Object containing JWS token, and a list of ETH accounts
 *
 * @example
 * ```typescript
 * import { connect, createTable } from '@textile/tableland'
 *
 *
 * async function setupDB() {
 *    const connectionReceipt = await connect("https://testnet.tableland.network");
 *    createTable("CREATE TABLE table_name (Foo varchar(255), Bar int)");
 * }
 * ```
 */
function connect(options = {
    host: "https://testnet.tableland.network",
    jwsToken: { token: "" },
    network: "testnet",
}) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        let { host, jwsToken } = options;
        network = (_a = options.network) !== null && _a !== void 0 ? _a : network;
        if (!host) {
            if (network === "staging") {
                host = "https://staging.tableland.network";
            }
            throw Error(`You haven't specified a tableland validator. If you don't have your own, try https://testnet.tableland.network.`);
        }
        setHost(host);
        const ethAccounts = yield globalThis.ethereum.request({
            method: "eth_requestAccounts",
        });
        if (options.jwsToken) {
            yield setToken(options.jwsToken);
        }
        jwsToken = yield getToken();
        connected = true;
        return {
            jwsToken,
            ethAccounts,
        };
    });
}
export { connect, getSigner, setSigner, getHost, setHost, setToken, getToken, setNetwork, getNetwork, isConnected, connectionCheck, };
//# sourceMappingURL=single.js.map