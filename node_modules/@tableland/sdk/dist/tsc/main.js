import { __awaiter } from "tslib";
import { registerTable } from "./lib/eth-calls.js";
import * as tablelandCalls from "./lib/tableland-calls.js";
import connect, { connectionCheck } from "./lib/single.js";
// import { v4 } from "uuid";
// eslint-disable-next-line @typescript-eslint/no-explicit-any
// eslint-disable-next-line no-unused-expressions
globalThis.ethereum;
/**
 * Registers an NFT with the Ethereum smart contract, then uses that to register
 * a new Table on Tableland
 * @param query An SQL create statement
 * @returns {string} The token ID of the table created
 */
function createTable(query, options) {
    return __awaiter(this, void 0, void 0, function* () {
        connectionCheck();
        // Validation
        const { tableId } = yield registerTable();
        tablelandCalls.createTable(query, tableId, options);
        return tableId;
    });
}
/**
 *
 * @param query A SQL query to run
 * @param tableId The token ID of the table which the query should be run against
 * @returns Table if read query, nothing if write query
 */
function runQuery(query, tableId) {
    return __awaiter(this, void 0, void 0, function* () {
        connectionCheck();
        console.log(`Running query "${query}" against token ${tableId}`);
        return yield tablelandCalls.runQuery(query, tableId);
    });
}
export { createTable, runQuery, connect };
export { myTables } from "./lib/tableland-calls.js";
//# sourceMappingURL=main.js.map