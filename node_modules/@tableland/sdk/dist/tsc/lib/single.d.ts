import { Signer } from "ethers";
export interface Token {
    token: string;
}
declare function isConnected(): boolean;
declare function connectionCheck(): void;
declare function setToken(tokenToBe?: string): Promise<void>;
declare function getToken(): Promise<Token>;
declare function setSigner(newSigner: Signer): Promise<boolean>;
declare function getSigner(): Promise<Signer>;
declare function getHost(): string;
declare function setHost(newHost: string): Promise<void>;
export interface Authenticator {
    jwsToken: string;
}
export interface ConnectionDetails {
    jwsToken: Token;
    ethAccounts: Array<string>;
}
/**
 * `connect` is a wrapper for using an ethereum signature to communicate with a Tableland server.
 * This client library can be used to interact with a local or remote Tableland gRPC-service
 * It is a wrapper around Textile Tableland DB API
 *
 * @example
 * ```typescript
 * import connect, { createTable } from '@textile/tableland'
 *
 *
 * async function setupDB() {
 *    const connectionDetails = await connect("https://tableland.com");
 *    createTable("CREATE TABLE table_name (Foo varchar(255), Bar int)", UUID())
 * }
 * ```
 */
declare function connect(validatorHost: string, options?: Authenticator): Promise<ConnectionDetails>;
export default connect;
export { getSigner, setSigner, getHost, setHost, setToken, getToken, isConnected, connectionCheck, };
